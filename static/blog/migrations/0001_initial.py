# Generated by Django 4.0.3 on 2022-06-19 12:41

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('tel', models.CharField(blank=True, max_length=11, null=True, verbose_name='手机号')),
                ('account_status', models.IntegerField(choices=[(1, '账号正常'), (2, '账号异常'), (3, '账号被封禁')], default=1, verbose_name='账号状态')),
                ('like_num', models.IntegerField(default=0, verbose_name='点赞数')),
                ('comm_num', models.IntegerField(default=0, verbose_name='评论数')),
                ('share_num', models.IntegerField(default=0, verbose_name='分享数')),
                ('scan_num', models.IntegerField(default=0, verbose_name='浏览量')),
            ],
            options={
                'verbose_name_plural': '用户',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=32, verbose_name='文章标题')),
                ('content', models.TextField(blank=True, null=True, verbose_name='文章内容')),
                ('release_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='发布时间')),
                ('alter_date', models.DateTimeField(auto_now=True, null=True, verbose_name='修改日期')),
                ('like_num', models.IntegerField(default=0, verbose_name='点赞数')),
                ('comm_num', models.IntegerField(default=0, verbose_name='评论数')),
                ('share_num', models.IntegerField(default=0, verbose_name='分享数')),
                ('scan_num', models.IntegerField(default=0, verbose_name='浏览量')),
                ('category', models.IntegerField(choices=[(1, '学习分享'), (2, '生活日常'), (3, '好物推荐')], default=1, verbose_name='文章分类')),
                ('recommend', models.BooleanField(default=True, verbose_name='推荐阅读')),
                ('cover', models.ImageField(blank=True, null=True, upload_to='Article_cover/', verbose_name='文章封面')),
                ('is_active', models.BooleanField(default=True, verbose_name='发布中')),
            ],
            options={
                'verbose_name_plural': '我的文章',
            },
        ),
        migrations.CreateModel(
            name='Avatar',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('path', models.ImageField(upload_to='user_avatar/', verbose_name='用户头像路径')),
            ],
            options={
                'verbose_name_plural': '用户头像组',
            },
        ),
        migrations.CreateModel(
            name='Banner',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('path', models.ImageField(upload_to='banner/', verbose_name='轮播图')),
            ],
            options={
                'verbose_name_plural': '轮播图',
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, verbose_name='回信邮箱')),
                ('content', models.TextField(verbose_name='反馈信息')),
                ('status', models.BooleanField(default=False, verbose_name='是否处理')),
                ('response_content', models.TextField(blank=True, null=True, verbose_name='回复内容')),
            ],
            options={
                'verbose_name_plural': '用户反馈',
            },
        ),
        migrations.CreateModel(
            name='Notice',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('content', models.CharField(max_length=255, verbose_name='公告內容')),
                ('release_date', models.DateTimeField(auto_now=True, verbose_name='发布时间')),
                ('level', models.IntegerField(choices=[(1, 'important'), (2, 'normal'), (3, 'weak')], default=1, verbose_name='重要程度')),
                ('is_active', models.BooleanField(default=True, verbose_name='正在发布中')),
            ],
            options={
                'verbose_name_plural': '网站公告',
            },
        ),
        migrations.CreateModel(
            name='Owner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='网站拥有人')),
                ('avatar', models.ImageField(upload_to='Owner/avatar/', verbose_name='头像')),
                ('abstract', models.CharField(max_length=128, verbose_name='个人介绍')),
                ('region', models.CharField(max_length=32, verbose_name='所在地')),
                ('school', models.CharField(max_length=32, verbose_name='就读学校')),
                ('mail', models.EmailField(max_length=254, verbose_name='联系邮箱')),
                ('tel', models.CharField(max_length=11, verbose_name='联系电话')),
                ('qq_svg', models.ImageField(help_text='QQ_svg', upload_to='Owner/svg/')),
                ('bili_svg', models.ImageField(help_text='小破站svg', upload_to='Owner/svg/')),
                ('weixin_svg', models.ImageField(upload_to='Owner/svg/', verbose_name='微信svg')),
                ('bili_href', models.URLField(verbose_name='小破站网址')),
                ('qq_qr', models.ImageField(upload_to='Owner/qr_img/', verbose_name='QQ二维码')),
                ('weixin_qr', models.ImageField(upload_to='Owner/qr_img/', verbose_name='微信二维码')),
            ],
            options={
                'verbose_name_plural': '网站所有者',
            },
        ),
        migrations.CreateModel(
            name='Sentence',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('content', models.CharField(max_length=128, verbose_name='句子内容')),
                ('source', models.CharField(max_length=32, verbose_name='来源')),
            ],
            options={
                'verbose_name_plural': '轮播句子',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=32, verbose_name='标签名')),
                ('category', models.IntegerField(choices=[(1, '学习分享'), (2, '生活日常'), (3, '好物推荐')], default=1, verbose_name='标签的分类')),
            ],
            options={
                'verbose_name_plural': '文章标签',
            },
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='网站名称')),
                ('abstract', models.CharField(max_length=128, verbose_name='网站摘要')),
                ('key_words', models.CharField(max_length=128, verbose_name='网站关键字')),
                ('filing', models.CharField(max_length=32, verbose_name='网站备案号')),
                ('create_date', models.DateTimeField(verbose_name='建站日期')),
                ('version', models.CharField(max_length=16, verbose_name='网站版本')),
                ('icon', models.FileField(upload_to='site_icon/', verbose_name='网站图标')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.owner', verbose_name='网站所有者')),
            ],
            options={
                'verbose_name_plural': '网站信息',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('like_num', models.IntegerField(default=0, verbose_name='点赞数')),
                ('content', models.TextField(verbose_name='评论内容')),
                ('drawing', models.ImageField(blank=True, null=True, upload_to='comment_drawing/', verbose_name='配图')),
                ('emoji', models.CharField(blank=True, max_length=32, null=True, verbose_name='表情包')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('article', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.article', verbose_name='评论的文章')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='评论人')),
            ],
            options={
                'verbose_name_plural': '评论',
            },
        ),
        migrations.AddField(
            model_name='article',
            name='tags',
            field=models.ManyToManyField(blank=True, to='blog.tag', verbose_name='文章标签'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='avatar',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='blog.avatar', verbose_name='用户头像'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='liked_article',
            field=models.ManyToManyField(to='blog.article', verbose_name='喜欢的文章'),
        ),
        migrations.AddField(
            model_name='userinfo',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
